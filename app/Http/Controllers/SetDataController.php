<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;
use Illuminate\Support\Facades\File;


class SetDataController extends Controller
{
    private $productNames = [
        '√Åo Polo C·ªï B·∫ª (M√£: PB210)',
        '√Åo Polo D·ªát Kim (M√£: DK315)',
        '√Åo Polo C√≥ Logo (M√£: PLG007)',
        '√Åo Polo ƒê∆°n S·∫Øc (M√£: DS499)',
        '√Åo Polo N√∫t C√†i (M√£: NC601)',
        '√Åo Polo N·ªØ Form R·ªông (M√£: FR701)',
        '√Åo Polo N·ªØ D·ªát Kim (M√£: DKN803)',
        '√Åo Polo N·ªØ ƒêa S·∫Øc (M√£: DSN909)',
        '√Åo Polo N·ªØ Slim-fit (M√£: SLF999)',
        '√Åo Polo N·ªØ In H·ªça Ti·∫øt (M√£: IHN111)',
        'Qu·∫ßn Short Nam Tr·∫ª Em (M√£: QSN205)',
        'Qu·∫ßn Short N·ªØ B√© G√°i (M√£: QSG309)',
        'Qu·∫ßn Short Jean Tr·∫ª Em (M√£: QSJ415)',
        'Qu·∫ßn Short Th·ªÉ Thao Tr·∫ª Em (M√£: QST520)',
        'Qu·∫ßn Short B√© Trai D√†i (M√£: QBD625)',
        'ƒê·∫ßm B√© G√°i X√≤e (M√£: DGX730)',
        'ƒê·∫ßm B√© Trai Th·ªÉ Thao (M√£: DTT840)',
        'ƒê·∫ßm B√© G√°i Hoa VƒÉn (M√£: DGH945)',
        '√Åo Thun Graphic Print (M√£: GP202)',
        '√Åo Thun Polo Nam (M√£: PL155)',
        '√Åo Thun S·ªçc Ngang (M√£: SN309)',
        '√Åo Thun Henley (M√£: HN008)',
        '√Åo Thun Crop Top (M√£: CT102)',
        '√Åo Thun N·ªØ D√†i Tay (M√£: DT305)',
        '√Åo Thun N·ªØ In H·ªça Ti·∫øt (M√£: IH401)',
        '√Åo Thun Oversize (M√£: OV507)',
        '√Åo Thun Phong C√°ch Boyfriend (M√£: BF610)',
    ];
    private function getRandomProductName()
    {
        // Ch·ªçn ng·∫´u nhi√™n m·ªôt t√™n s·∫£n ph·∫©m t·ª´ danh s√°ch
        $randomIndex = array_rand($this->productNames);
        return $this->productNames[$randomIndex];
    }
    private function findMatchingMAPL2()
    { 
        return rand(1, 3); // Adjust this based on your logic
    }

    private function mota()
    { 
        return "üîπ B·∫£ng size Outerity
        S: D√†i 69 R·ªông 52.5 | 1m50 - 1m65, 45 - 55Kg
        M: D√†i 73 R·ªông 55 | 1m60 - 1m75, 50 - 65Kg
        L: D√†i 76.5 R·ªông 57.5 | 1m7 - 1m8, 65Kg - 80Kg
        üëâ N·∫øu ch∆∞a bi·∫øt l·ª±a size b·∫°n c√≥ th·ªÉ inbox ƒë·ªÉ ƒë∆∞·ª£c ch√∫ng m√¨nh t∆∞ v·∫•n.
        
        ‚ÄºÔ∏èL∆ØU √ù ‚ñ™Ô∏èKhi gi·∫∑t s·∫£n ph·∫©m b·∫±ng tay: Vui l√≤ng ho√† tan kƒ© n∆∞·ªõc gi·∫∑t, b·ªôt gi·∫∑t v·ªõi n∆∞·ªõc sau ƒë√≥ m·ªõi cho s·∫£n ph·∫©m v√†o. ‚ñ™Ô∏èKhi gi·∫∑t s·∫£n ph·∫©m b·∫±ng m√°y gi·∫∑t: Vui l√≤ng ƒë·ªï n∆∞·ªõc gi·∫∑t, b·ªôt gi·∫∑t v√†o khay c·ªßa m√°y.
        
         üö´TUY·ªÜT ƒê·ªêI KH√îNG ƒë·ªï n∆∞·ªõc gi·∫∑t, b·ªôt gi·∫∑t tr·ª±c ti·∫øp v√†o s·∫£n ph·∫©m. Nh∆∞ v·∫≠y s·∫Ω ·∫£nh h∆∞·ªüng ƒë·∫øn m√†u s·∫Øc c·ªßa s·∫£n ph·∫©m v√† l√†m cho √°o c√≥ t√¨nh tr·∫°ng loang m√†u. Outerity xin c·∫£m ∆°n ·∫°üñ§
        
        üîπ Ch√≠nh s√°ch ƒë·ªïi tr·∫£ Outerity.
        - Mi·ªÖn ph√≠ ƒë·ªïi h√†ng cho kh√°ch mua ·ªü Outerity trong tr∆∞·ªùng h·ª£p b·ªã l·ªói t·ª´ nh√† s·∫£n xu·∫•t, giao nh·∫ßm h√†ng, nh·∫ßm size.
        - Quay video m·ªü s·∫£n ph·∫©m khi nh·∫≠n h√†ng, n·∫øu kh√¥ng c√≥ video unbox, khi ph√°t hi·ªán l·ªói ph·∫£i b√°o ngay cho Outerity trong 1 ng√†y t√≠nh t·ª´ ng√†y giao h√†ng th√†nh c√¥ng. Qua 1 ng√†y ch√∫ng m√¨nh kh√¥ng gi·∫£i quy·∫øt khi kh√¥ng c√≥ video unbox.
        - S·∫£n ph·∫©m ƒë·ªïi trong th·ªùi gian 3 ng√†y k·ªÉ t·ª´ ng√†y nh·∫≠n h√†ng
        - S·∫£n ph·∫©m c√≤n m·ªõi nguy√™n tem, tags, s·∫£n ph·∫©m ch∆∞a gi·∫∑t v√† kh√¥ng d∆° b·∫©n, h∆∞ h·ªèng b·ªüi nh·ªØng t√°c nh√¢n b√™n ngo√†i c·ª≠a h√†ng sau khi mua h√†ng."; // Adjust this based on your logic
    }

    private function generateRandomString($length = 10) {
        $characters = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, strlen($characters) - 1)];
        }
        return $randomString;
    }

    private function getRandomNames($count) {
        $names = ['An', 'B·∫£o', 'C∆∞·ªùng', 'ƒê·∫°t', 'Duy', 'H·∫£i', 'H√πng', 'Kh√°nh', 'Linh', 'Minh', 'Nam', 'Nghƒ©a', 'Ph√∫c', 'Qu√¢n', 'Quang', 'S∆°n', 'T√πng', 'V√¢n', 'Vi·ªát', 'V≈©'];
        $randomNames = [];
    
        for ($i = 0; $i < $count; $i++) {
            $randomNames[] = $names[array_rand($names)];
        }
    
        return $randomNames;
    }
    
    // H√†m ƒë·ªÉ t·∫°o ƒë·ªãa ch·ªâ ng·∫´u nhi√™n ·ªü Vi·ªát Nam
    private function getRandomAddress() {
        $provinces = ['H√† N·ªôi', 'TP. H·ªì Ch√≠ Minh', 'ƒê√† N·∫µng', 'H·∫£i Ph√≤ng', 'C·∫ßn Th∆°', 'An Giang', 'B·∫°c Li√™u', 'B·∫Øc K·∫°n', 'B·∫Øc Giang', 'B·∫Øc Ninh'];
        $districts = ['Qu·∫≠n 1', 'Qu·∫≠n 2', 'Qu·∫≠n 3', 'Qu·∫≠n 4', 'Qu·∫≠n 5', 'Qu·∫≠n 6', 'Qu·∫≠n 7', 'Qu·∫≠n 8', 'Qu·∫≠n 9', 'Qu·∫≠n 10'];
        $wards = ['Ph∆∞·ªùng 1', 'Ph∆∞·ªùng 2', 'Ph∆∞·ªùng 3', 'Ph∆∞·ªùng 4', 'Ph∆∞·ªùng 5', 'Ph∆∞·ªùng 6', 'Ph∆∞·ªùng 7', 'Ph∆∞·ªùng 8', 'Ph∆∞·ªùng 9', 'Ph∆∞·ªùng 10'];
    
        $randomProvince = $provinces[array_rand($provinces)];
        $randomDistrict = $districts[array_rand($districts)];
        $randomWard = $wards[array_rand($wards)];
    
        return "$randomProvince, $randomDistrict, $randomWard";
    }
    
    public function setdata(){

        // $baseDirectory = public_path('images/products/');

        // // Duy·ªát qua t·ª´ng th∆∞ m·ª•c s·∫£n ph·∫©m
        //     for ($i = 1; $i <= 364; $i++) {
        //         $directory = $baseDirectory . $i . '/';

        //         // L·∫•y danh s√°ch c√°c t·ªáp trong th∆∞ m·ª•c
        //         $files = File::glob($directory . '*');

        //         $thumbnailCount = 0;
        //         $thumbnailFile = null;

        //         // Ki·ªÉm tra v√† ƒë·ªïi t√™n c√°c t·ªáp trong th∆∞ m·ª•c
        //         foreach ($files as $file) {
        //             $fileName = pathinfo($file, PATHINFO_FILENAME);

        //             if (strpos($fileName, 'thumnail') !== false) {
        //                 $thumbnailCount++;
        //                 $thumbnailFile = $file;

        //                 // N·∫øu c√≥ nhi·ªÅu h∆°n m·ªôt t·ªáp c√≥ ch·ª©a "thumnail", ƒë·ªïi t√™n c√°c t·ªáp c√≤n l·∫°i
        //                 if ($thumbnailCount > 1) {
        //                     $newFileName = '1702717402'; // T√™n m·ªõi c·ªßa file

        //                     // ƒê∆∞·ªùng d·∫´n m·ªõi c·ªßa t·ªáp tin
        //                     $newFilePath = $directory . $newFileName . '.' . pathinfo($file, PATHINFO_EXTENSION);

        //                     // ƒê·ªïi t√™n t·ªáp tin
        //                     File::move($file, $newFilePath);

        //                     // Update th√¥ng tin trong c∆° s·ªü d·ªØ li·ªáu n·∫øu c·∫ßn
        //                     // ...
        //                 }
        //             }
        //         }

        //         // ƒê·ªïi t√™n t·ªáp c√≤n l·∫°i th√†nh '1702717402'
        //         if ($thumbnailFile && $thumbnailCount === 1) {
        //             $newFilePath = $directory . '1702717402.' . pathinfo($thumbnailFile, PATHINFO_EXTENSION);

        //             File::move($thumbnailFile, $newFilePath);

        //             // Update th√¥ng tin trong c∆° s·ªü d·ªØ li·ªáu n·∫øu c·∫ßn
        //             // ...
        //         }
        //     }

        // for ($i = 1; $i <= 364; $i++) {
        //     $filePath = public_path("images/products/{$i}/1702717402.png");
        
        //     // Ki·ªÉm tra n·∫øu t·ªáp tin t·ªìn t·∫°i th√¨ xo√°
        //     if (File::exists($filePath)) {
        //         File::delete($filePath);
        //     }
        // }

        
        // $sourceFolder = public_path('images/products/1'); // Th∆∞ m·ª•c ngu·ªìn trong Laravel
        // $destinationFolder = public_path('images/products'); // Th∆∞ m·ª•c ƒë√≠ch trong Laravel

        // for ($i = 2; $i <= 365; $i++) {
        //     $newFolder = $destinationFolder . '/' . $i;
        //     File::makeDirectory($newFolder);

        //     $files = File::files($sourceFolder);

        //     foreach ($files as $key => $file) {
        //         $fileName = pathinfo($file, PATHINFO_FILENAME);
        //         $fileExtension = pathinfo($file, PATHINFO_EXTENSION);

        //         // T·∫°o t√™n file m·ªõi theo m·∫´u
        //         if ($key === 0) {
        //             $newFileName = "{$i}_1_" . str_replace('1_', '', $fileName) . ".{$fileExtension}";
        //         } else {
        //             $newFileName = "{$i}_" . str_replace('1_', '', $fileName) . ".{$fileExtension}";
        //         }

        //         // ƒê∆∞·ªùng d·∫´n m·ªõi cho file trong th∆∞ m·ª•c m·ªõi
        //         $newFilePath = $newFolder . '/' . $newFileName;

        //         // Sao ch√©p v√† ƒë·ªïi t√™n file
        //         File::copy($file, $newFilePath);
        //     }
        // }

        //1. phanloai_sanphams
        {
            $categories = [
                ['MAPL' => 1, 'TENPL' => 'Nam'],
                ['MAPL' => 2, 'TENPL' => 'N·ªØ'],
                ['MAPL' => 3, 'TENPL' => 'Tr·∫ª em'],
            ];
    
            foreach ($categories as $category) {
                DB::table('phanloai_sanphams')->insert($category);
            }
        }
        
        //11. mausacs
        {
            $colors = [
                ['TENMAU' => 'ƒêen', 'HEX' => '#000000'],
                ['TENMAU' => 'Tr·∫Øng', 'HEX' => '#FFFFFF'],
                ['TENMAU' => 'ƒê·ªè', 'HEX' => '#FF0000'],
                ['TENMAU' => 'Xanh d∆∞∆°ng', 'HEX' => '#0000FF'],
                ['TENMAU' => 'Xanh l√°', 'HEX' => '#00FF00'],
                ['TENMAU' => 'V√†ng', 'HEX' => '#FFFF00'],
                ['TENMAU' => 'Cam', 'HEX' => '#FFA500'],
                ['TENMAU' => 'V√†ng', 'HEX' => '#FFFF00'],
                ['TENMAU' => 'T√≠m', 'HEX' => '#800080'],
                ['TENMAU' => 'Xanh ƒë·∫≠m', 'HEX' => '#000080'],
                ['TENMAU' => 'V√†ng cam', 'HEX' => '#FFD700'],
                ['TENMAU' => 'V√†ng xanh', 'HEX' => '#00FF00'],
                ['TENMAU' => 'ƒê·ªè t√≠m', 'HEX' => '#8B008B'],
            ];
            
            foreach ($colors as $color) {
                DB::table('mausacs')->insert($color);
            }
        }

        //2. phanloai_sanpham2s 
        {
            $categories = [
                ['MAPL2' => 1, 'MAPL1' => 1, 'TENPL2' => '√Åo thun'],
                ['MAPL2' => 2, 'MAPL1' => 1, 'TENPL2' => '√Åo POLO'],
                ['MAPL2' => 3, 'MAPL1' => 1, 'TENPL2' => 'Qu·∫ßn short'],
                ['MAPL2' => 1, 'MAPL1' => 2, 'TENPL2' => '√Åo thun'],
                ['MAPL2' => 2, 'MAPL1' => 2, 'TENPL2' => 'V√°y'],
                ['MAPL2' => 3, 'MAPL1' => 2, 'TENPL2' => 'ƒê·∫ßm'],
                ['MAPL2' => 1, 'MAPL1' => 3, 'TENPL2' => '√Åo'],
                ['MAPL2' => 2, 'MAPL1' => 3, 'TENPL2' => 'Qu·∫ßn'],
                ['MAPL2' => 3, 'MAPL1' => 3, 'TENPL2' => 'Set ƒë·ªì'],
                // ... any other entries you want to include
            ];
            foreach ($categories as $category) {
                DB::insert('INSERT INTO phanloai_sanpham2s (MAPL2, MAPL1, TENPL2) VALUES (?, ?, ?)', [
                    $category['MAPL2'],
                    $category['MAPL1'],
                    $category['TENPL2'],
                ]);
            }

        }

        // 10. size
        {
            $sizes = ['S', 'M', 'L', 'XL', 'XXL', '3XL'];
            foreach ($sizes as $size) {
                DB::insert('INSERT INTO sizes (MASIZE) VALUES (?)', [$size]);
            }
        }

        // //5. taikhoans
        {

            DB::insert('INSERT INTO taikhoans (TEN, EMAIL, PASSWORD, GIOITINH, ROLE, AdminVerify, email_verified_at, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)', [
                'ƒê·∫°t',
                'khachhang@gmail.com',
                '$2y$10$ybrP/W6BpE4I.N50D7Usa.ETNx60CSFsk1IJ9O6GvySLkx4GeYWn2',
                'Nam',
                'Kh√°ch h√†ng',
                'ƒê√£ x√°c nh·∫≠n',
                '2023-12-14 10:16:07',
                '2023-12-14 10:15:48',
                '2023-12-14 10:16:07',
            ]);

            DB::insert('INSERT INTO taikhoans (TEN, EMAIL, PASSWORD, GIOITINH, ROLE, AdminVerify, email_verified_at, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)', [
                'ƒê·∫°t',
                'nhanvien@gmail.com',
                '$2y$10$ybrP/W6BpE4I.N50D7Usa.ETNx60CSFsk1IJ9O6GvySLkx4GeYWn2',
                'Nam',
                'Nh√¢n vi√™n',
                'ƒê√£ x√°c nh·∫≠n',
                '2023-12-14 10:16:07',
                '2023-12-14 10:15:48',
                '2023-12-14 10:16:07',
            ]);
            
            // C√¢u truy v·∫•n insert cho d√≤ng d·ªØ li·ªáu th·ª© hai
            DB::insert('INSERT INTO taikhoans (TEN, EMAIL, PASSWORD, GIOITINH, ROLE, AdminVerify, email_verified_at, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)', [
                'ƒê·∫°tt',
                '21521932@gm.uit.edu.vn',
                '$2y$10$nJgPXErZJOzbHhFf/oL88O79JF.KQFByZcM9yVUz3O8x.hN.02Ida',
                'Nam',
                'Admin',
                'ƒê√£ x√°c nh·∫≠n',
                '2023-12-14 10:17:51',
                '2023-12-14 10:17:42',
                '2023-12-14 10:17:51',
            ]);

            
            $randomNames = $this->getRandomNames(30);

            foreach ($randomNames as $name) {
                $gender = rand(0, 1) ? 'Nam' : 'N·ªØ';
                $address = $this->getRandomAddress();
                $phoneNumber = '0' . str_pad(rand(1, 999999999), 9, '0', STR_PAD_LEFT); // S·ªë ƒëi·ªán tho·∫°i b·∫Øt ƒë·∫ßu b·∫±ng 0
                $role = rand(0, 1) ? 'Nh√¢n vi√™n' : 'Kh√°ch h√†ng';
                $AdminVerify = rand(0, 1) ? 'Ch·ªù x√°c nh·∫≠n' : 'ƒê√£ x√°c nh·∫≠n';

                DB::insert(
                    "INSERT INTO taikhoans 
                    (TEN, EMAIL, PASSWORD, GIOITINH, SDT, DIACHI, ROLE, AdminVerify, 
                    email_verified_at, created_at, updated_at) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 
                    [
                        $name,
                        strtolower(str_replace(' ', '', $name)) . '@example.com',
                        '$2y$10$ybrP/W6BpE4I.N50D7Usa.ETNx60CSFsk1IJ9O6GvySLkx4GeYWn2',
                        $gender,
                        $phoneNumber,
                        $address,
                        $role,
                        $AdminVerify,
                        '2023-12-14',
                        '2023-12-14',
                        '2023-12-14',
                    ]
                );
            }
        }

        //3. sanphams
        {
            $startDate = Carbon::create(2023, 1, 1);
            $endDate = Carbon::create(2023, 12, 31);

            $currentDate = $startDate;

            $categories = [
                ['MAPL' => 1, 'TENPL' => 'Nam'],
                ['MAPL' => 2, 'TENPL' => 'N·ªØ'],
                ['MAPL' => 3, 'TENPL' => 'Tr·∫ª em'],
            ];
            
            while ($currentDate <= $endDate) { 
                    
                    $randomIndex = rand(0, count($categories) - 1);
                    $category = $categories[$randomIndex];
                    $TENSP = $this->getRandomProductName(); // Generate product name

                    $GIAGOC = rand(230000, 500000);
                    $minDiscount = 5; // Ph·∫ßn trƒÉm gi·∫£m gi√° t·ªëi thi·ªÉu
                    $maxDiscount = 40; // Ph·∫ßn trƒÉm gi·∫£m gi√° t·ªëi ƒëa

                    // T√≠nh to√°n GIABAN t·ª´ GIAGOC
                    $discountPercentage = rand($minDiscount, $maxDiscount);
                    $GIABAN = $GIAGOC * (100 - $discountPercentage) / 100;
                    $GIABAN = round($GIABAN / 1000) * 1000; // L√†m cho GIABAN c√≥ 3 s·ªë cu·ªëi l√† s·ªë 0

                    // ƒê·∫£m b·∫£o GIAGOC c√≥ 3 s·ªë cu·ªëi l√† s·ªë 0
                    $GIAGOC = round($GIAGOC / 1000) * 1000;

                    // Ki·ªÉm tra n·∫øu GIABAN l·ªõn h∆°n ho·∫∑c b·∫±ng GIAGOC, ho√°n ƒë·ªïi gi√° tr·ªã ƒë·ªÉ ƒë·∫£m b·∫£o GIABAN lu√¥n nh·ªè h∆°n GIAGOC
                    if ($GIABAN >= $GIAGOC) {
                        $temp = $GIAGOC;
                        $GIAGOC = $GIABAN;
                        $GIABAN = $temp;
                    }

                    $MAPL_SP = $category['MAPL'];
                    $MAPL_SP2 = $this->findMatchingMAPL2();
                    $MOTA = $this->mota();
    
                    // Th√™m s·∫£n ph·∫©m v√†o b·∫£ng sanphams 
                    DB::table('sanphams')->insert([
                        'TENSP' => $TENSP,
                        'GIAGOC' => $GIAGOC,
                        'GIABAN' => $GIABAN,
                        'MAPL_SP' => $MAPL_SP,
                        'MAPL_SP2' => $MAPL_SP2,
                        'MOTA' => $MOTA,
                        'created_at' => $currentDate,
                        'updated_at' => $currentDate,
                    ]); 
    
                $currentDate->addDay();
            }
        }

        // //4. hinhanhs v√† hinhanhsanphams
        {
            $imageDirectories = glob(public_path('images/products/*'), GLOB_ONLYDIR);

            foreach ($imageDirectories as $imageDir) {
                $masp = basename($imageDir);

                // L·∫•y danh s√°ch c√°c t·∫≠p tin trong th∆∞ m·ª•c s·∫£n ph·∫©m
                $imageFiles = File::files($imageDir);

                foreach ($imageFiles as $imageFile) {
                    $fileName = pathinfo($imageFile, PATHINFO_FILENAME);
                    $fileExtension = pathinfo($imageFile, PATHINFO_EXTENSION);

                    // X√¢y d·ª±ng URL h√¨nh ·∫£nh
                    $imgUrl = url("/images/products/{$masp}/{$fileName}.{$fileExtension}");

                    // Th√™m v√†o b·∫£ng hinhanhsanphams
                    DB::table('hinhanhs')->insert([
                        'MAHINHANH' => $fileName
                    ]);
                    DB::table('hinhanhsanphams')->insert([
                        'MAHINHANH' => $fileName,
                        'MASP' => $masp,
                        'imgURL' => $imgUrl,
                    ]);
                }
            }
        }
        
        // //6. thongtingiaohangs
        {
            // C√¢u truy v·∫•n insert cho d√≤ng d·ªØ li·ªáu th·ª© nh·∫•t
            DB::insert('INSERT INTO thongtingiaohangs (MATTGH, MATK, TEN, SDT, DIACHI, TINH_TP, QUAN_HUYEN, PHUONG_XA, DANGSUDUNG) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)', [
                1,
                2,
                'ƒë·ªó sƒ© ƒë·∫°t',
                '0968795749',
                'tri·ªáu phong',
                'T·ªânh Nam ƒê·ªãnh',
                'Huy·ªán Tr·ª±c Ninh',
                'X√£ Tr·ª±c Thanh',
                1,
            ]);

            // C√¢u truy v·∫•n insert cho d√≤ng d·ªØ li·ªáu th·ª© hai
            DB::insert('INSERT INTO thongtingiaohangs (MATTGH, MATK, TEN, SDT, DIACHI, TINH_TP, QUAN_HUYEN, PHUONG_XA, DANGSUDUNG) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)', [
                2,
                2,
                'nguy·ªÖn vƒÉn a',
                '0123456789',
                'tri·ªáu phong',
                'Th√†nh ph·ªë H·∫£i Ph√≤ng',
                'Qu·∫≠n H·∫£i An',
                'Ph∆∞·ªùng ƒê·∫±ng L√¢m',
                1,
            ]);

            // C√¢u truy v·∫•n insert cho d√≤ng d·ªØ li·ªáu th·ª© ba
            DB::insert('INSERT INTO thongtingiaohangs (MATTGH, MATK, TEN, SDT, DIACHI, TINH_TP, QUAN_HUYEN, PHUONG_XA, DANGSUDUNG) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)', [
                3,
                2,
                'ƒë·ªó sƒ© ƒë·∫°t',
                '0968795749',
                'tri·ªáu phong',
                'T·ªânh B·∫Øc K·∫°n',
                'Huy·ªán Ba B·ªÉ',
                'X√£ Khang Ninh',
                1,
            ]);

        }

        // //7.voucher 
        {
            for ($i = 0; $i < 5; $i++) {
                $randomDateStart = Carbon::now()->addDays(5)->toDateString(); // THOIGIANBD > th·ªùi gian hi·ªán t·∫°i v√† c√°ch th·ªùi gian hi·ªán t·∫°i 5 ng√†y
                $randomDateEnd = Carbon::now()->addDays(10)->toDateString(); // THOIGIANKT > th·ªùi gian hi·ªán t·∫°i v√† c√°ch th·ªùi gian hi·ªán t·∫°i 10 ng√†y
            
                $MAVOUCHER = $this->generateRandomString(10);
                $SOLUONG = rand(1, 999);
                $SOLUONG_CONLAI = $SOLUONG;
                $GIATRI_DH_MIN = rand(100000, 500000); // 700000 < GIATRI_DH_MIN <= 1000000
                $GIATRI_GIAM_MAX = rand(1, 20) * 10000; // GIATRI_GIAM_MAX l√† b·ªôi c·ªßa s·ªë 10000 v√† < 200000
                $THOIGIANBD = $randomDateStart;
                $THOIGIANKT = $randomDateEnd;
                $PHANLOAI_VOUCHER = rand(0, 1) ? 'V·∫≠n chuy·ªÉn' : 'ƒê∆°n h√†ng'; // Ch·ªçn ng·∫´u nhi√™n 'V·∫≠n chuy·ªÉn' ho·∫∑c 'ƒê∆°n h√†ng'
                $GIATRIGIAM = rand(1, 20) / 100; // GIATRIGIAM l√† b·ªôi c·ªßa 0.05 v√† <= 1
                $MOTA = "S·ªë l∆∞·ª£ng voucher: $SOLUONG, 
                    Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu: $GIATRI_DH_MIN,
                    Gi√° tr·ªã gi·∫£m t·ªëi ƒëa: $GIATRI_GIAM_MAX, 
                    Th·ªùi gian b·∫Øt ƒë·∫ßu: $THOIGIANBD, 
                    Th·ªùi gian k·∫øt th√∫c: $THOIGIANKT,
                    Lo·∫°i voucher: $PHANLOAI_VOUCHER, 
                    Gi√° tr·ªã gi·∫£m: $GIATRIGIAM.";
            
                DB::insert('INSERT INTO vouchers (MAVOUCHER, SOLUONG, SOLUONG_CONLAI, GIATRI_DH_MIN, GIATRI_GIAM_MAX, THOIGIANBD, THOIGIANKT, MOTA, PHANLOAI_VOUCHER, GIATRIGIAM) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [
                    $MAVOUCHER,
                    $SOLUONG,
                    $SOLUONG_CONLAI,
                    $GIATRI_DH_MIN,
                    $GIATRI_GIAM_MAX,
                    $THOIGIANBD,
                    $THOIGIANKT,
                    $MOTA,
                    $PHANLOAI_VOUCHER,
                    $GIATRIGIAM,
                ]);
            }
            for ($i = 0; $i < 5; $i++) {
                $randomDateStart = Carbon::now()->subDays(5)->addDays($i)->toDateString(); // THOIGIANBD t·ª´ 5 ng√†y tr∆∞·ªõc ƒë·∫øn ng√†y hi·ªán t·∫°i
                $randomDateEnd = Carbon::now()->addDays(10)->toDateString(); // THOIGIANKT t·ª´ ng√†y hi·ªán t·∫°i ƒë·∫øn 10 ng√†y sau
                
                $MAVOUCHER = $this->generateRandomString(30);
                $SOLUONG = rand(1, 999);
                $SOLUONG_CONLAI = $SOLUONG;
                $GIATRI_DH_MIN = rand(100000, 500000); // 700000 < GIATRI_DH_MIN <= 1000000
                $GIATRI_GIAM_MAX = rand(1, 20) * 10000; // GIATRI_GIAM_MAX l√† b·ªôi c·ªßa s·ªë 10000 v√† < 200000
                $THOIGIANBD = $randomDateStart;
                $THOIGIANKT = $randomDateEnd;
                $PHANLOAI_VOUCHER = rand(0, 1) ? 'V·∫≠n chuy·ªÉn' : 'ƒê∆°n h√†ng'; // Ch·ªçn ng·∫´u nhi√™n 'V·∫≠n chuy·ªÉn' ho·∫∑c 'ƒê∆°n h√†ng'
                $GIATRIGIAM = rand(1, 20) / 100; // GIATRIGIAM l√† b·ªôi c·ªßa 0.05 v√† <= 1
                $MOTA = "S·ªë l∆∞·ª£ng voucher: $SOLUONG, 
                    Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu: $GIATRI_DH_MIN,
                    Gi√° tr·ªã gi·∫£m t·ªëi ƒëa: $GIATRI_GIAM_MAX, 
                    Th·ªùi gian b·∫Øt ƒë·∫ßu: $THOIGIANBD, 
                    Th·ªùi gian k·∫øt th√∫c: $THOIGIANKT,
                    Lo·∫°i voucher: $PHANLOAI_VOUCHER, 
                    Gi√° tr·ªã gi·∫£m: $GIATRIGIAM.";
            
                DB::insert('INSERT INTO vouchers (MAVOUCHER, SOLUONG, SOLUONG_CONLAI, GIATRI_DH_MIN, GIATRI_GIAM_MAX, THOIGIANBD, THOIGIANKT, MOTA, PHANLOAI_VOUCHER, GIATRIGIAM) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [
                    $MAVOUCHER,
                    $SOLUONG,
                    $SOLUONG_CONLAI,
                    $GIATRI_DH_MIN,
                    $GIATRI_GIAM_MAX,
                    $THOIGIANBD,
                    $THOIGIANKT,
                    $MOTA,
                    $PHANLOAI_VOUCHER,
                    $GIATRIGIAM,
                ]);
            }
            for ($i = 0; $i < 5; $i++) {
                $randomDateStart = Carbon::now()->subDays(5 + $i)->toDateString(); // THOIGIANBD t·ª´ 5 ng√†y tr∆∞·ªõc ƒë·∫øn ng√†y hi·ªán t·∫°i
                $randomDateEnd = Carbon::now()->addDays(10)->toDateString(); // THOIGIANKT t·ª´ ng√†y hi·ªán t·∫°i ƒë·∫øn 10 ng√†y sau
               
                $MAVOUCHER = $this->generateRandomString(30);
                $SOLUONG = rand(1, 999);
                $SOLUONG_CONLAI = $SOLUONG;
                $GIATRI_DH_MIN = rand(100000, 500000); // 700000 < GIATRI_DH_MIN <= 1000000
                $GIATRI_GIAM_MAX = rand(1, 20) * 10000; // GIATRI_GIAM_MAX l√† b·ªôi c·ªßa s·ªë 10000 v√† < 200000
                $THOIGIANBD = $randomDateStart;
                $THOIGIANKT = $randomDateEnd;
                $PHANLOAI_VOUCHER = rand(0, 1) ? 'V·∫≠n chuy·ªÉn' : 'ƒê∆°n h√†ng'; // Ch·ªçn ng·∫´u nhi√™n 'V·∫≠n chuy·ªÉn' ho·∫∑c 'ƒê∆°n h√†ng'
                $GIATRIGIAM = rand(1, 20) / 100; // GIATRIGIAM l√† b·ªôi c·ªßa 0.05 v√† <= 1
                $MOTA = "S·ªë l∆∞·ª£ng voucher: $SOLUONG, 
                    Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu: $GIATRI_DH_MIN,
                    Gi√° tr·ªã gi·∫£m t·ªëi ƒëa: $GIATRI_GIAM_MAX, 
                    Th·ªùi gian b·∫Øt ƒë·∫ßu: $THOIGIANBD, 
                    Th·ªùi gian k·∫øt th√∫c: $THOIGIANKT,
                    Lo·∫°i voucher: $PHANLOAI_VOUCHER, 
                    Gi√° tr·ªã gi·∫£m: $GIATRIGIAM.";
            
                DB::insert('INSERT INTO vouchers (MAVOUCHER, SOLUONG, SOLUONG_CONLAI, GIATRI_DH_MIN, GIATRI_GIAM_MAX, THOIGIANBD, THOIGIANKT, MOTA, PHANLOAI_VOUCHER, GIATRIGIAM) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [
                    $MAVOUCHER,
                    $SOLUONG,
                    $SOLUONG_CONLAI,
                    $GIATRI_DH_MIN,
                    $GIATRI_GIAM_MAX,
                    $THOIGIANBD,
                    $THOIGIANKT,
                    $MOTA,
                    $PHANLOAI_VOUCHER,
                    $GIATRIGIAM,
                ]);
            }
        }
        // //8. TH·ª∞C HI·ªÜN INSERT D·ªÆ LI·ªÜU V√ÄO B·∫¢NG HO√Å ƒê∆†N ƒê·ªÇ TH·ªêNG K√ä
        {
            $startDate = '2023-01-01';
            $endDate = '2023-12-31';
    
            $currentDate = $startDate;
            $statuses = ['ƒê√£ giao', 'Chu·∫©n b·ªã h√†ng', 'ƒêang giao', 'ƒê√£ hu·ª∑'];
            $shippingFee = rand(0, 1) > 0.5 ? rand(25000, 30000) : rand(25000, 30000);
            $paymentStatus = rand(0, 1) ? 'ƒê√£ thanh to√°n' : 'Ch∆∞a thanh to√°n';
    
            while ($currentDate <= $endDate) {
                $totalProductPrice = rand(250, 1000) * 1000;
                $voucherDiscount = rand(10, 200) * 1000;
                $totalOrderPrice = $totalProductPrice + $shippingFee - $voucherDiscount;
            
                DB::table('donhangs')->insert([
                    'MATK' => rand(1, 30),
                    'NGAYORDER' => $currentDate,
                    'NGAYGIAOHANG' => $currentDate, // C√≥ th·ªÉ l√† null ho·∫∑c gi·ªëng ng√†y ƒë·∫∑t h√†ng
                    'TONGTIEN_SP' => $totalProductPrice,
                    'VOUCHERGIAM' => $voucherDiscount,
                    'TONGTIENDONHANG' => $totalOrderPrice,
                    'PHIVANCHUYEN' => $shippingFee,
                    'HINHTHUC_THANHTOAN' => rand(0, 1) > 0.5 ? 'Chuy·ªÉn kho·∫£n' : 'Thanh to√°n khi nh·∫≠n h√†ng',
                    'TRANGTHAI_THANHTOAN' => $paymentStatus,
                    'TRANGTHAI_DONHANG' => $statuses[array_rand($statuses)],
                    'MATTGH' => rand(1, 3),
                    'GHICHU' => 'Ghi ch√∫'
                ]);
    
                // TƒÉng ng√†y th√™m 1
                $currentDate = date('Y-m-d', strtotime($currentDate . ' +1 day'));
            }
        }

        // // //9. donhang_voucher
        // // {
        // //     // for ($i = 1; $i <= 50; $i++) {
        // //     //     $randomVoucher = DB::table('vouchers')->inRandomOrder()->first();
        // //     //     $randomOrder = DB::table('donhangs')->inRandomOrder()->first();
            
        // //     //     DB::table('donhang_vouchers')->insert([
        // //     //         'MAVOUCHER' => $randomVoucher->MAVOUCHER,
        // //     //         'MADH' => $randomOrder->MADH,
        // //     //     ]);
        // //     // }
        // // }
        
        
        
        // //12. sanpham_mausac_sizes
        {
            $sanPhams = DB::table('sanphams')->get();
            $mauSacs = DB::table('mausacs')->get();
            $sizes = DB::table('sizes')->get();

            foreach ($sanPhams as $sanPham) {
                $listSize = $sizes->random(rand(3, 5)); // L·∫•y ng·∫´u nhi√™n 1-3 k√≠ch th∆∞·ªõc
                $listColor = $mauSacs->random(rand(1, 4)); // L·∫•y ng·∫´u nhi√™n 1-3 m√†u s·∫Øc

                foreach ($listSize as $size) {
                    foreach ($listColor as $color) {
                        $maxdsp = DB::table('sanpham_mausac_sizes')->insertGetId([
                            'MASP' => $sanPham->MASP,
                            'MAMAU' => $color->MAMAU,
                            'MASIZE' => $size->MASIZE,
                            'SOLUONG' => rand(0, 1000),
                        ]);
                        // X·ª≠ l√Ω sau khi th√™m d·ªØ li·ªáu, n·∫øu c·∫ßn
                    }
                }
            }
        }
        // // 13. chitiet_donhangs
        {
            
            // L·∫•y danh s√°ch MADH
            $donHangs = DB::table('donhangs')->select('MADH')->get()->pluck('MADH')->toArray();

            foreach ($donHangs as $madh) {
                // L·∫•y ng·∫´u nhi√™n t·ª´ 1 ƒë·∫øn 5 MAXDSP cho m·ªói MADH
                $maxdspCount = rand(1, 5);
                $maxdspList = DB::table('sanpham_mausac_sizes')->inRandomOrder()->limit($maxdspCount)->pluck('MAXDSP')->toArray();

                foreach ($maxdspList as $maxdsp) {
                    // L·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ MAXDSP
                    $sanpham = DB::table('sanpham_mausac_sizes')
                        ->select('MASP', 'SOLUONG')
                        ->where('MAXDSP', $maxdsp)
                        ->first();

                    // T√≠nh TONGTIEN
                    $soluong = rand(1, 5);
                    $tongtien = $soluong * DB::table('sanphams')->where('MASP', $sanpham->MASP)->value('GIABAN');

                    // Insert v√†o b·∫£ng chitiet_donhangs
                    DB::table('chitiet_donhangs')->insert([
                        'MADH' => $madh,
                        'MAXDSP' => $maxdsp,
                        'TONGTIEN' => $tongtien,
                        'SOLUONG' => $soluong,
                        'DADANHGIA' => 0,
                    ]);
                }
            }
        }
        // // 14. danhgia_sanphams
        {
            // L·∫•y danh s√°ch ƒë∆°n h√†ng v√† MASP t∆∞∆°ng ·ª©ng c·ªßa t·∫•t c·∫£ c√°c ƒë∆°n h√†ng
            $donhangs = DB::table('donhangs')->select('MADH', 'MATK')->get();

            foreach ($donhangs as $donhang) {
                // L·∫•y danh s√°ch MAXDSP c·ªßa ƒë∆°n h√†ng n√†y
                $maxdsps = DB::table('chitiet_donhangs')
                    ->where('MADH', $donhang->MADH)
                    ->pluck('MAXDSP')
                    ->toArray();

                foreach ($maxdsps as $maxdsp) {
                    // L·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ MAXDSP
                    $sanpham = DB::table('sanpham_mausac_sizes')
                        ->select('MASP')
                        ->where('MAXDSP', $maxdsp)
                        ->first();

                    // T·∫°o ƒë√°nh gi√° ng·∫´u nhi√™n
                    $sosao = rand(1, 5);
                    $noidung = 'ƒê√°nh gi√° cho s·∫£n ph·∫©m n√†y l√† ' . $sosao . ' sao.';

                    // Insert ƒë√°nh gi√° v√†o danhgia_sanphams
                    DB::table('danhgia_sanphams')->insert([
                        'MADH' => $donhang->MADH,
                        'MASP' => $sanpham->MASP,
                        'MATK' => $donhang->MATK,
                        'MAXDSP' => $maxdsp,
                        'SOLUONG_SAO' => $sosao,
                        'NOIDUNG_DANHGIA' => $noidung,
                    ]);
                }
            }
        }
        
        // DB::update("update donhangs set TRANGTHAI_DONHANG = 'ƒê√£ giao'");
    }
}
